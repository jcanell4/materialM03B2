                    <div class="container">
                        <div class="row">
                            <div class="col-lg-12">
                                <div class= "headSlide">
                                     <h2 >Debat 4 - Específic de l'especialitat</h2>
                                     <h3> Estructura de dades: interfície, control i tractament de dades</h3>
                                 </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12">
                                <div class=bodySlide>
                                    <p>Com ja podeu intuir, escollir una bona organització de les dades, ben estructurades, de ràpid accés i fàcilment identificables, és clau en el desenvolupament de qualsevol aplicació. Ara bé, com la majoria de coses complexes, no hi ha una recepta que ens determini quina és la millor organització. És més, sovint no existeix una solució ideal sinó que les diverses solucions afavoreixen més uns aspectes en detriment d'un altres, i cal escollir, en funció de les prioritats de l'aplicació una solució prou eficient i adequada. De fet, l'experiència i el sentit comú tenen un pes molt gran en la presa de decisions, però és important no deixar-se endur per prejudicis ni suposicions i raonar lògicament les decisions preses, sobre tot quan es comença.</p>
                                    <p>Abans de continuar, hauríem de preguntar-nos què és una estructura de dades i com es fa servir. En sí, el concepte és fàcil, però per usar-lo cal tenir ben clar el significat d'instància de l'estructura i conèixer unes regles bàsiques per no trobar-nos amb sorpreses. És el que intentarem explicar ara.</p>
                                    <p class="iocimportant">Les estructures de dades són organitzacions més o menys complexes de dades, de tal forma que la seva organització ens configura un valor extra que ens ajuda a interpretar la informació que representen. Per exemple, hem de considerar una estructura de dades el conjunt de valors que poden identificar i representar una persona. Per exemple el seu nom, la seva edat, el seu DNI, les titulacions que posseeix, els treballs que ha realitzat, etc.</p>
                                    <p>Els llenguatges de programació donen suport a les estructures de dades per mitjà dels tipus compostos de dades i concretament, el llenguatge JAVA, fa servir classes per definir els seus tipus de dades compostos.</p>
                                    <p class="iocimportant">Els tipus de dades compostos (classe en el llenguatge JAVA) permeten definir com s'identifiquen i organitzen els valors entre sí. Com identificadors usarem noms conceptuals que ens ajudin a interpretar el que representen.</p>
                                    <p>Per exemple, si haguéssim d'implementar una calculadora que hagués de fer les 4 operacions bàsiques entre dos números qualsevol, el tipus compost a fer servir podria ser:</p>
                                    <pre><code class="java">
package ioc.m03.uf2.funcions.a502;

public class DadesCalculadora {
    double operador1;
    double operador2;
    char operacio;    
    double resultat;
}
                                    </code></pre>
                                    <p>Fixeu-vos que els tipus compostos no són les dades pròpiament, sinó les variables de classe que contindran les dades. En altres paraules, són el que defineix quina forma han de tenir les dades, com han de ser, quins seran els identificadors dels valors i quina la organització interna.</p>
                                    <p>I les dades? com hi afegim les dades? Abans d'explicar-ho m'agradaria remarcar que les dades no s'emmagatzemen a l'estructura. El llenguatges de programació només poden emmagatzemar dades a la memòria i és allà on aniran a parar les dades. Ara bé, per a què serveixen aleshores els tipus compostos? Doncs l'explicació que més s'hi aproxima és que actuen de plantilla. Així, els tipus compostos emmotllen la memòria per poder-hi emmagatzemar dades en la forma definida en cada tipus compost. En l'argot dels llenguatges de desenvolupament, en comptes de parlar d'emmotllar, es parla d'instanciar. De fet, les dades de la memòria són instancies d'algun tipus de dades (siguin o no compostos).</p>
                                   <figure id ="figura_instanciacio" class="left">
                                        <img width="464" src="images/activities/tipusCompostInstancia.png" alt="instanciació de tipus compostos">
                                        <figcaption style="width: 510px; max-width: 75%;">
                                            <span class="figuretitle">figura </span> Instanciació d'un tipus compost.                               
                                        </figcaption>
                                    </figure>
                                    <p>Cada tipus compost pot instanciar múltiples dades a la memòria de forma simultània. Cada dada manté els seus propis valors.</p>
                                    <p> A la pràctica, la instanciació es fa sobre una variable i es fa servir la paraula clau <em>new</em> seguida del tipus compost a instanciar amb els parèntesis d'execució:</p>
                                    <pre><code class="java">
DadesCalculadora operacio1 = new DadesCalculadora();
DadesCalculadora operacio2 = new DadesCalculadora();
                                    </code></pre>
                                    <p>A partir d'una instancia de tipus compost (variable), podem accedir als seus elements per modificar o obtenir el seu valor escrivint després del nom de la variable, un punt seguit del nom de l'element. Exemple:</p>
                                  <pre><code class="java">
operacio1.operador1 = 5;
operacio1.operador2 = 3;
operacio1.operacio = '+';
...
if(operacio1.operacio == '+'){
    operacio1.resultat = operacio1.operador1 + operacio1.operador2;
}
                                  </code></pre>
                                    <p>En el llenguatge JAVA no és possible donar valors a una estructura si no s'ha creat la instancia del seu tipus compost. Si ho féssim obtindríem un error:</p>
                                    <pre><code class="java">
DadesCalculadora operacio2;

//La instrucció següent dona error perquè no s'ha intanciat la variable: 
//          operacio2 = new DadesCalculadora()
operacio2.operador1 = 7; 
                                    </code></pre>
                                    <p>La organització dels tipus compostos pot arrivar a ser força complexa segons les dades que hagi de contenir. En aquest sentit és habitual organitzar les dades de forma jeràrquica per tal d'evitar una gran llista d'atributs difícilment gestionable. Tenim diverses formes d'organitzar aquesta jerarquia. Per exemple introduïnt arrays, aconseguim que un conjunt de dades depengui d'una altre. Clarifiquem-ho amb un exemple. Imaginem que volem fer una aplicacióp per jugar al joc de les dames i ens proposem crear un tipus compost per representar el joc. Recordeu que es tracta d'un joc de taula on disposem 24 fitxes (12 blanques i 12 negres) en un tauler de 8x8 caselles. Recordeu també que el joc consisteix en que cada jugador per torns van movent una única fitxa intentant mengar-se les de l'adversari. Per definir les dades del joc, necessitarem representar el tauler on indicarem la posició de cada fitxa, però també caldrà indicar quants torns s'ha jugat per tal de saber quin serà el jugador al que li ha de tocar moure (si el valor és parell li tocaria al jugador que jugui amb les fitxes blanques i si és senar amb el que jugui amb les negres: </p>
                                    <pre><code class="java">
public class JocDames {    
    static final int CASELLA_BUIDA = 0;
    static final int FITXA_BLANCA = 1;
    static final int FITXA_NEGRA = 2;

    int[][] tauler = new int[8][8];
    int torn;
}
                                        
                                    </code></pre>
                                    <p>Com vaieu, dins la propia definicó podem optar per inicialitzar les dades de tipus Array, però també podriem optar per deixar-ho fins el moment en que creem al instancia:</p>
                                    <pre><code class="java">
public class JocDames {    
    static final int CASELLA_BUIDA = 0;
    static final int FITXA_BLANCA = 1;
    static final int FITXA_NEGRA = 2;

    int[][] tauler;
    int torn;
}
                                        
                                    </code></pre>
                                    <p>En el cas que ens ocupa, sembla correcte crear la matriu ja inicialitzada perquè sabem que el gtaules serà sempre de 8x8. Ara si el joc permatés jugar amb taulers de diferents mides, no hi hauria més remei que inicialitzar-la a <em>posteriori</em>, un cop coneguem la seva dimensió. </p>
                                    <p>Una altre forma de representar la organització jeràrquica consistiria en inclure tipus compostos dins la pròpia definició. Imaginem que desitgem disposar d'informació extra referent a cada jugador del joc de dames. Per exemple el seu nom i el nombre de partides que ha guanyat. Com que són dos els jugadors, podriem pensar en una solució com ara:</p>
                                    <pre><code class="java">
public class JocDames {    
    static final int CASELLA_BUIDA = 0;
    static final int FITXA_BLANCA = 1;
    static final int FITXA_NEGRA = 2;

    int[][] tauler = new int[8][8];
    int torn;
    
    String nomJugador1;
    int partidesGuanyades1
    String nomJugador2;
    int partidesGuanyades2;
}
                                        
                                    </code></pre>
                                    <p>Però convindreu amb mi que tantes variables poden despistar una mica. Hi ha una forma de reduir el nombre de variables usant una jerarquia. Per fer-ho podem crear un tipus nou anomenat Jugador en el que hi definirem les dades que representin un jugador:</p>
                                    <pre><code class="java">
public class Jugador {    
    String nom;
    int partidesGuanyades;
}
                                    </code></pre>
                                    <p>A partir d'aquí podem fer servir aquest nou tipus de dada compost dins dl tipuis JocDames:</p>
                                    <pre><code class="java">
public class JocDames {    
    static final int CASELLA_BUIDA = 0;
    static final int FITXA_BLANCA = 1;
    static final int FITXA_NEGRA = 2;

    int[][] tauler = new int[8][8];
    int torn;
    Jugador jugadorBlanques;
    Jugador jugadorNegres;    
}                                        
                                    </code></pre>
                                </div> 
                            </div>
                        </div>
                    </div>

